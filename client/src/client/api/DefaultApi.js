/**
 * RAI Cloud SDK
 * This is a Client SDK for RAI Cloud
 *
 * The version of the OpenAPI document: 1.0.8
 * Contact: support@relational.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateComputeRequestProtocol from '../model/CreateComputeRequestProtocol';
import CreateComputeResponseProtocol from '../model/CreateComputeResponseProtocol';
import CreateUserRequestProtocol from '../model/CreateUserRequestProtocol';
import CreateUserResponseProtocol from '../model/CreateUserResponseProtocol';
import DeleteComputeRequestProtocol from '../model/DeleteComputeRequestProtocol';
import DeleteComputeResponseProtocol from '../model/DeleteComputeResponseProtocol';
import ListComputesResponseProtocol from '../model/ListComputesResponseProtocol';
import ListDatabasesResponseProtocol from '../model/ListDatabasesResponseProtocol';
import ListUsersResponseProtocol from '../model/ListUsersResponseProtocol';
import UpdateDatabaseRequestProtocol from '../model/UpdateDatabaseRequestProtocol';

/**
* Default service.
* @module client/api/DefaultApi
* @version 1.0.8
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:client/api/DefaultApi
    * @class
    * @param {module:client/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:client/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the computeDelete operation.
     * @callback module:client/api/DefaultApi~computeDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:client/model/DeleteComputeResponseProtocol} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete compute
     * @param {module:client/model/DeleteComputeRequestProtocol} deleteComputeRequestProtocol Compute to be deleted
     * @param {module:client/api/DefaultApi~computeDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:client/model/DeleteComputeResponseProtocol}
     */
    computeDelete(deleteComputeRequestProtocol, callback) {
      let postBody = deleteComputeRequestProtocol;
      // verify the required parameter 'deleteComputeRequestProtocol' is set
      if (deleteComputeRequestProtocol === undefined || deleteComputeRequestProtocol === null) {
        throw new Error("Missing the required parameter 'deleteComputeRequestProtocol' when calling computeDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteComputeResponseProtocol;
      return this.apiClient.callApi(
        '/compute', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the computeGet operation.
     * @callback module:client/api/DefaultApi~computeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:client/model/ListComputesResponseProtocol} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List computes
     * @param {module:client/api/DefaultApi~computeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:client/model/ListComputesResponseProtocol}
     */
    computeGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListComputesResponseProtocol;
      return this.apiClient.callApi(
        '/compute', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the computePut operation.
     * @callback module:client/api/DefaultApi~computePutCallback
     * @param {String} error Error message, if any.
     * @param {module:client/model/CreateComputeResponseProtocol} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create compute
     * @param {module:client/model/CreateComputeRequestProtocol} createComputeRequestProtocol New compute
     * @param {module:client/api/DefaultApi~computePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:client/model/CreateComputeResponseProtocol}
     */
    computePut(createComputeRequestProtocol, callback) {
      let postBody = createComputeRequestProtocol;
      // verify the required parameter 'createComputeRequestProtocol' is set
      if (createComputeRequestProtocol === undefined || createComputeRequestProtocol === null) {
        throw new Error("Missing the required parameter 'createComputeRequestProtocol' when calling computePut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateComputeResponseProtocol;
      return this.apiClient.callApi(
        '/compute', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseGet operation.
     * @callback module:client/api/DefaultApi~databaseGetCallback
     * @param {String} error Error message, if any.
     * @param {module:client/model/ListDatabasesResponseProtocol} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List databases
     * @param {module:client/api/DefaultApi~databaseGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:client/model/ListDatabasesResponseProtocol}
     */
    databaseGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDatabasesResponseProtocol;
      return this.apiClient.callApi(
        '/database', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databasePost operation.
     * @callback module:client/api/DefaultApi~databasePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update database
     * @param {module:client/model/UpdateDatabaseRequestProtocol} updateDatabaseRequestProtocol Database fields to be updated
     * @param {module:client/api/DefaultApi~databasePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    databasePost(updateDatabaseRequestProtocol, callback) {
      let postBody = updateDatabaseRequestProtocol;
      // verify the required parameter 'updateDatabaseRequestProtocol' is set
      if (updateDatabaseRequestProtocol === undefined || updateDatabaseRequestProtocol === null) {
        throw new Error("Missing the required parameter 'updateDatabaseRequestProtocol' when calling databasePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/database', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userGet operation.
     * @callback module:client/api/DefaultApi~userGetCallback
     * @param {String} error Error message, if any.
     * @param {module:client/model/ListUsersResponseProtocol} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List users
     * @param {module:client/api/DefaultApi~userGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:client/model/ListUsersResponseProtocol}
     */
    userGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListUsersResponseProtocol;
      return this.apiClient.callApi(
        '/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userPut operation.
     * @callback module:client/api/DefaultApi~userPutCallback
     * @param {String} error Error message, if any.
     * @param {module:client/model/CreateUserResponseProtocol} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create user
     * @param {module:client/model/CreateUserRequestProtocol} createUserRequestProtocol New user
     * @param {module:client/api/DefaultApi~userPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:client/model/CreateUserResponseProtocol}
     */
    userPut(createUserRequestProtocol, callback) {
      let postBody = createUserRequestProtocol;
      // verify the required parameter 'createUserRequestProtocol' is set
      if (createUserRequestProtocol === undefined || createUserRequestProtocol === null) {
        throw new Error("Missing the required parameter 'createUserRequestProtocol' when calling userPut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateUserResponseProtocol;
      return this.apiClient.callApi(
        '/user', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
